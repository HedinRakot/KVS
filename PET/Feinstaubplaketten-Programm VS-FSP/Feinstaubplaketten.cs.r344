using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;
using System.Threading;

namespace Feinstaubplaketten_Programm_VS_FSP
{
    public partial class Feinstaubplaketten : Form
    {
        public Feinstaubplaketten()
        {
            Thread thread = new Thread(new ThreadStart(Splashscreen));
            thread.Start();
            Thread.Sleep(3000);
            InitializeComponent();
            thread.Abort();
            this.Focus();
        }
        public void Splashscreen()
        {
            Application.Run(new Splashscreen());
        }
        private void Feinstaubplaketten_Load(object sender, EventArgs e)
        {
            //Fremdzündung wird von Anfang an auf True gesetzt------------
            this.radioButton1.Checked = true;
            string CSVPath = "";
            if (String.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["DatatablePath"]))
            {
                CSVPath = Application.StartupPath + "datatable.csv";
            }
            else
            {
                CSVPath = System.Configuration.ConfigurationManager.AppSettings["DatatablePath"];
            }
            if (!System.IO.File.Exists(CSVPath))
            {
                MessageBox.Show("Die Datenbank-Datei konnte nicht gefunden werden, es wurde eine neue angelegt. Sie finden die Datenbank-Datei unter: " + CSVPath);
                string kennzeichen = "Kennzeichen";
                string fahrzeugart = "Fahrzeugart";
                string antriebsart = "Antriebsart";
                string stufe = "Stufe";
                string emissionsschluessel = "Emissionsschluessel";
                string farbe = "Farbe";
                string benutzername = "Benutzername";
                string datum = "Datum";
                DatatableWriter(kennzeichen, fahrzeugart, antriebsart, stufe, emissionsschluessel, farbe, benutzername, datum);
            }
        }
        public void DatatableWriter(string kennzeichen, string fahrzeugart, string antriebsart, string stufe, string emissionsschluessel, string farbe, string benutzername, string datum)
        {
            string CSVPath = "";
            if (String.IsNullOrEmpty(System.Configuration.ConfigurationManager.AppSettings["DatatablePath"]))
            {
                CSVPath = Application.StartupPath + "datatable.csv";
            }
            else
            {
                CSVPath = System.Configuration.ConfigurationManager.AppSettings["DatatablePath"];
            }
            using (FileStream myfs = new FileStream(CSVPath, FileMode.Append, FileAccess.Write))
            using (StreamWriter mysw = new StreamWriter(myfs))
            {
                mysw.WriteLine(kennzeichen.ToUpper() + ";" + fahrzeugart.ToUpper() + ";" + antriebsart.ToUpper() + ";" + stufe.ToUpper() + ";" + emissionsschluessel.ToUpper() + ";" + farbe.ToUpper() + ";" + benutzername.ToUpper() + ";" + datum.ToUpper());
            }
        }
        //Prüft ob die Tabelle LogTBL vorhanden ist, wenn nicht wird sie erstellt END
        //Form on Load END-----------------------------------------------

        //Fremdzündung Checked?------------------------------------------
        private void radioButton1_CheckedChanged(object sender, EventArgs e)
        {
            RadioButton fremdzuendend = sender as RadioButton;
            if (fremdzuendend.Checked)
            {
                this.comboBox3.Enabled = false;
                this.comboBox1.Enabled = true;
                this.comboBox1.Items.Clear();
                this.comboBox1.Items.Add("M1");
                this.comboBox1.Items.Add("M2, M3, N");
                this.comboBox1.Text = string.Empty;

                this.comboBox2.Items.Clear();
                this.comboBox2.Text = string.Empty;
                this.comboBox2.Enabled = false;
                this.comboBox3.Items.Clear();
                this.comboBox3.Text = string.Empty;
                this.button1.Enabled = false;
            };
        }
        //Fremdzündung Checked? END--------------------------------------
        //Selbstzündung Checked?-----------------------------------------
        private void radioButton2_CheckedChanged(object sender, EventArgs e)
        {
            RadioButton selbstzuendend = sender as RadioButton;
            if (selbstzuendend.Checked)
            {
                this.comboBox1.Enabled = true;
                this.comboBox1.Items.Clear();
                this.comboBox1.Items.Add("M1 (PMS)");
                this.comboBox1.Items.Add("M1");
                this.comboBox1.Items.Add("M2, M3, N");
                this.comboBox1.Items.Add("M2, M3, N (PMS)");
                this.comboBox1.Text = string.Empty;

                this.comboBox2.Items.Clear();
                this.comboBox2.Text = string.Empty;
                this.comboBox2.Enabled = false;
                this.button1.Enabled = false;
            };
        }
        //Selbstzündung Checked? END-------------------------------------
        //Elektromotor / Neuzulassung Checked?-----------------------------------------
        private void radioButton3_CheckedChanged(object sender, EventArgs e)
        {
            this.comboBox1.Items.Clear();
            this.comboBox1.Text = string.Empty;
            this.comboBox1.Enabled = false;
            this.comboBox2.Items.Clear();
            this.comboBox2.Text = string.Empty;
            this.comboBox2.Enabled = false;
            this.comboBox3.Items.Clear();
            this.comboBox3.Text = string.Empty;
            this.comboBox3.Enabled = false;

            if (this.radioButton3.Checked && this.textBox1.Text != null && this.textBox1.Text != "")
            {
                this.button1.Enabled = true;
            }
            else
            {
                this.button2.Enabled = false;
            }
        }

        //Emissionsschlüssel in die Combobox einfügen--------------------
        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            this.comboBox2.Items.Clear();
            this.comboBox2.Text = string.Empty;
            this.comboBox3.Items.Clear();
            this.comboBox3.Text = string.Empty;
            if (radioButton1.Checked)
            {
                this.comboBox2.Enabled = true;
                switch (comboBox1.SelectedItem.ToString())
                { 
                    case "M1":
                        comboBox2.Items.Clear();
                        this.button1.Enabled = false;
                        ArrayList fremdPKW = new ArrayList() {"01", "02", "14", "16", "18-70", "71", "75", "77"};
                        foreach (string fremdM1Item in fremdPKW) 
                        { 
                            comboBox2.Items.Add(fremdM1Item);                        
                        } 
                        break;
                    case "M2, M3, N":
                        comboBox2.Items.Clear();
                        this.button1.Enabled = false;
                        ArrayList fremdNFZG = new ArrayList() {"30-50", "60", "61", "70", "71", "80", "81", "83", "84", "90", "91"};
                        foreach (string fremdM1Item in fremdNFZG) 
                        {
                            comboBox2.Items.Add(fremdM1Item);                        
                        }
                        break;
                    default:
                        //Ein anderer Fall ist nicht möglich
                        break;
                }
            }
            else if (radioButton2.Checked)
            {
                switch (comboBox1.SelectedItem.ToString())
                {
                    case "M1 (PMS)":
                        this.comboBox3.Enabled = true;
                        this.comboBox3.Items.Clear();
                        this.comboBox3.Text = string.Empty;
                        this.comboBox2.Enabled = false;
                        this.comboBox2.Items.Clear();
                        this.comboBox2.Text = string.Empty;
                        this.comboBox3.Items.Add("PM 00");
                        this.comboBox3.Items.Add("PM 01");
                        this.comboBox3.Items.Add("PM 02");
                        this.comboBox3.Items.Add("PM 03");
                        this.comboBox3.Items.Add("PM 04");
                        this.comboBox2.Items.Clear();
                        this.button1.Enabled = false;
                        break;
                    case "M1":
                        this.comboBox2.Items.Clear();
                        this.comboBox2.Enabled = true;
                        this.button1.Enabled = false;
                        this.comboBox3.Enabled = false;
                        this.comboBox3.Text = string.Empty;
                        ArrayList selbstPKWM1 = new ArrayList() { "25-29", "30", "31", "32", "33", "35", "36", "37", "38", "39", "41", "42", "43", "44-52", "53-70", "71", "72", "73-75" };
                        foreach (string selbstM1Item in selbstPKWM1)
                        {
                            comboBox2.Items.Add(selbstM1Item);
                        }
                        break;
                    case "M2, M3, N":
                        this.comboBox2.Items.Clear();
                        this.comboBox2.Enabled = true;
                        this.button1.Enabled = false;
                        this.comboBox3.Enabled = false;
                        this.comboBox3.Text = string.Empty;
                        ArrayList selbstNFZG = new ArrayList() { "20", "21", "22", "33", "34", "35", "43", "44", "45", "53", "54", "55", "60", "61", "70", "71", "80", "81", "83", "84", "90", "91"};
                        foreach (string selbstItem in selbstNFZG)
                        {
                            comboBox2.Items.Add(selbstItem);
                        }
                        break;
                    case "M2, M3, N (PMS)":
                        this.comboBox3.Items.Clear();
                        this.comboBox2.Enabled = false;
                        this.comboBox2.Items.Clear();
                        this.comboBox2.Text = string.Empty;
                        this.button1.Enabled = false;
                        this.comboBox3.Text = string.Empty;
                        this.comboBox3.Enabled = true;
                        this.comboBox3.Items.Add("PMK 00");
                        this.comboBox3.Items.Add("PMK 01");
                        this.comboBox3.Items.Add("PMK 02");
                        this.comboBox3.Items.Add("PMK 03");
                        this.comboBox3.Items.Add("PMK 04");
                        break;
                    default:
                        //Ein anderer Fall ist nicht möglich
                        break;
                }
            }
        }
        //Emissionsschlüssel in die Combobox einfügen END-------------------------------------
        //Verfügbare Emissionsschlüssel für PMS festlegen-------------------------------------
        private void comboBox3_SelectedIndexChanged(object sender, EventArgs e)
        {
            this.button1.Enabled = false;
            if (comboBox1.SelectedItem.ToString() == "M1 (PMS)")
            {
                this.comboBox2.Enabled = true;
                switch (comboBox3.SelectedItem.ToString())
                {
                    case "PM 00":
                        this.comboBox2.Items.Clear();
                        ArrayList selbstPKWMPM00 = new ArrayList() { "14", "16", "18", "21", "22", "28", "29", "34", "40", "77" };
                        foreach (string selbstPMSItem in selbstPKWMPM00)
                        {
                            this.comboBox2.Items.Add(selbstPMSItem);
                        }
                        break;
                    case "PM 01":
                        this.comboBox2.Items.Clear();
                        ArrayList selbstPKWMPM01 = new ArrayList() { "14", "16", "18", "19", "20", "21", "22", "23", "24", "25-27", "34", "35", "40", "41", "49-52", "71", "77" };
                        foreach (string selbstPMSItem in selbstPKWMPM01)
                        {
                            this.comboBox2.Items.Add(selbstPMSItem);
                        }
                        break;
                    case "PM 02":
                        this.comboBox2.Items.Clear();
                        ArrayList selbstPKWMPM02 = new ArrayList() { "30", "31", "36", "37", "42", "44-48", "67-70" };
                        foreach (string selbstPMSItem in selbstPKWMPM02)
                        {
                            this.comboBox2.Items.Add(selbstPMSItem);
                        }
                        break;
                    case "PM 03":
                        this.comboBox2.Items.Clear();
                        ArrayList selbstPKWMPM03 = new ArrayList() { "32", "33", "38", "39", "43", "53-66" };
                        foreach (string selbstPMSItem in selbstPKWMPM03)
                        {
                            this.comboBox2.Items.Add(selbstPMSItem);
                        }
                        break;
                    case "PM 04":
                        this.comboBox2.Items.Clear();
                        ArrayList selbstPKWMPM04 = new ArrayList() { "44-70" };
                        foreach (string selbstPMSItem in selbstPKWMPM04)
                        {
                            this.comboBox2.Items.Add(selbstPMSItem);
                        }
                        break;
                    default:
                        //Ein anderer Fall ist nicht möglich
                        break;
                }
            }
            else if (this.comboBox1.SelectedItem.ToString() == "M2, M3, N (PMS)")
            {
                this.comboBox2.Enabled = true;
                switch (this.comboBox3.SelectedItem.ToString())
                {
                    case "PMK 00":
                        this.comboBox2.Items.Clear();
                        ArrayList selbstPKWMPM06 = new ArrayList() { "10-12", "30-32", "40-42", "43", "50-52", "53"};
                        foreach (string selbstPMSItem in selbstPKWMPM06)
                        {
                            this.comboBox2.Items.Add(selbstPMSItem);
                        }
                        break;
                    case "PMK 01":
                        this.comboBox2.Items.Clear();
                        ArrayList selbstPKWMPM07 = new ArrayList() { "10-12", "20-22", "30-33", "40-43", "44", "50-53", "54", "60", "61" };
                        foreach (string selbstPMSItem in selbstPKWMPM07)
                        {
                            this.comboBox2.Items.Add(selbstPMSItem);
                        }
                        break;
                    case "PMK 02":
                        this.comboBox2.Items.Clear();
                        ArrayList selbstPKWMPM08 = new ArrayList() { "10-12", "20-22", "30-33", "40-45", "50-55", "60", "61", "70", "71" };
                        foreach (string selbstPMSItem in selbstPKWMPM08)
                        {
                            this.comboBox2.Items.Add(selbstPMSItem);
                        }
                        break;
                    case "PMK 03":
                        this.comboBox2.Items.Clear();
                        ArrayList selbstPKWMPM09 = new ArrayList() { "33-35", "44", "45", "54", "55", "60", "61" };
                        foreach (string selbstPMSItem in selbstPKWMPM09)
                        {
                            this.comboBox2.Items.Add(selbstPMSItem);
                        }
                        break;
                    case "PMK 04":
                        this.comboBox2.Items.Clear();
                        ArrayList selbstPKWMPM10 = new ArrayList() { "33-35", "44", "45", "54", "55", "60", "61" };
                        foreach (string selbstPMSItem in selbstPKWMPM10)
                        {
                            this.comboBox2.Items.Add(selbstPMSItem);
                        }
                        break;
                    default:
                        //Ein anderer Fall ist nicht möglich
                        break;
                }
            }
        }
        //Verfügbare Emissionsschlüssel END-------------------------------------------
        //Druckenbutton wird freigeschaltet wenn ComboBox2 != "" && textBox1 != ""----
        private void comboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.comboBox2.SelectedItem.ToString() != "" && textBox1.Text != "")
            {
                this.button1.Enabled = true;
            }
            else
            {
                this.button1.Enabled = false;
            }
        }
        private void textBox1_TextChanged(object sender, EventArgs e)
        {
            if (this.radioButton3.Checked && this.textBox1.Text != null && this.textBox1.Text != "")
            {
                this.button1.Enabled = true;
            }
            else if (this.comboBox2 != null && this.comboBox2.SelectedItem != null)
            {
                if (this.comboBox2.SelectedItem.ToString() != "" && textBox1.Text != "")
                {
                    this.button1.Enabled = true;
                }
                else
                {
                    this.button1.Enabled = false;
                }
            }
        }

        /*
         * Falls problemen - folgendes überprüfen:
         * SQLExpress läuft?
         * Drücker zuerst lokal mit USB installieren und dann durch netzwerk benutzen.
         * */
        //Druckenbutton wird freigeschaltet wenn ComboBox2 != "" && textBox1 != "" END
        //Drucken---------------------------------------------------------------------
        private void button1_Click(object sender, EventArgs e)
        {
            //Emmissionsnummer Arrays für Benzin/Gas/Ethanol
            ArrayList fremdPKW = new ArrayList() {"01", "02", "14", "16", "18-70", "71", "75", "77"};
            ArrayList fremdNFZG = new ArrayList() {"30-50", "60", "61", "70", "71", "80", "81", "83", "84", "90", "91"};

            string strKennzeichen = textBox1.Text;
            string strFahrzeugart;
            if (radioButton1.Checked)
            {
                strFahrzeugart = "Fremdzündung";
            }
            else if(this.radioButton3.Checked){
                strFahrzeugart = "ElektroNeuzulassung";
            }
            else 
            { 
                strFahrzeugart = "Selbstzündung"; 
            }
            string strAntriebsart = comboBox1.Text;
            string strStufe = comboBox3.Text;
            string strEmissionsschluesselnr = comboBox2.Text;
            string strFarbe = "N/A";
            string strDatum = System.DateTime.Now.ToString("dd.MM.yyyy");
            //string strDatum = System.DateTime.Now.ToLongTimeString();
            string strUsername = System.Security.Principal.WindowsIdentity.GetCurrent().Name;

            //Plakettenfarbe wird festgelegt----------------------------------------------
            if (strFahrzeugart == radioButton1.Text)
            {
                switch (strAntriebsart)
                {
                    case "M1":
                        if (fremdPKW.Contains(strEmissionsschluesselnr))
                        {
                            strFarbe = "Gruen";
                        }
                        else
                        {
                            MessageBox.Show("Es wurde keine passende Plakettenfarbe gefunden.", "Fehler", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        }
                    break;
                    case "M2, M3, N":
                    if (fremdNFZG.Contains(strEmissionsschluesselnr))
                    {
                        strFarbe = "Gruen";
                    }
                    else
                    {
                        MessageBox.Show("Es wurde keine passende Plakettenfarbe gefunden.", "Fehler", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                    break;
                }
            }
            else if (strFahrzeugart == "ElektroNeuzulassung")
            {
                strFarbe = "Gruen";
            }
            else
            {
                switch (strAntriebsart)
                {
                    case "M1 (PMS)":
                        ArrayList tmp1 = new ArrayList() { "19", "20", "23", "24" };
                        ArrayList tmp2 = new ArrayList() { "14", "16", "18", "21", "22", "34", "40", "77" };
                        ArrayList tmp3 = new ArrayList() { "28", "29" };
                        ArrayList tmp4 = new ArrayList() { "14", "16", "18", "21", "22", "25-27", "34", "35", "40", "41", "71", "77" };
                        ArrayList tmp5 = new ArrayList() { "27", "49-52" };
                        ArrayList tmp6 = new ArrayList() { "30", "31", "36", "37", "42", "44-48", "67-70" };
                        ArrayList tmp7 = new ArrayList() { "32", "33", "38", "39", "43", "53-66" };
                        ArrayList tmp8 = new ArrayList() { "44-70" };
                        if (strStufe == "PM 01" && tmp1.Contains(strEmissionsschluesselnr) || strStufe == "PM 00" && tmp2.Contains(strEmissionsschluesselnr))
                        {
                            strFarbe = "Rot";
                        }
                        else if (strStufe == "PM 00" && tmp3.Contains(strEmissionsschluesselnr) || strStufe == "PM 01" && tmp4.Contains(strEmissionsschluesselnr))
                        {
                            strFarbe = "Gelb";
                        }
                        else if (strStufe == "PM 01" && tmp5.Contains(strEmissionsschluesselnr) || strStufe == "PM 02" && tmp6.Contains(strEmissionsschluesselnr) || strStufe == "PM 03" && tmp7.Contains(strEmissionsschluesselnr) || strStufe == "PM 04" && tmp8.Contains(strEmissionsschluesselnr))
                        {
                            strFarbe = "Gruen";
                        }
                        else
                        {
                            strFarbe = "N/A";
                        }
                        break;
                    case "M1":
                        ArrayList tmp9 = new ArrayList() { "25-29", "35", "41", "71" };
                        ArrayList tmp10 = new ArrayList() { "30", "31", "36", "37", "42", "44-52", "72" };
                        ArrayList tmp11 = new ArrayList() { "32", "33", "38", "39", "43", "53-70", "73-75" };
                        if (tmp9.Contains(strEmissionsschluesselnr))
                        {
                            strFarbe = "Rot";
                        }
                        else if (tmp10.Contains(strEmissionsschluesselnr))
                        {
                            strFarbe = "Gelb";
                        }
                        else if (tmp11.Contains(strEmissionsschluesselnr))
                        {
                            strFarbe = "Gruen";
                        }
                        else
                        {
                            strFarbe = "N/A";
                        }
                        break;
                    case "M2, M3, N":
                        ArrayList tmp12 = new ArrayList() { "20", "21", "22", "33", "43", "53", "60", "61" };
                        ArrayList tmp13 = new ArrayList() { "34", "44", "54", "70", "71" };
                        ArrayList tmp14 = new ArrayList() { "35", "45", "55", "80", "81", "83", "84", "90", "91" };
                        if (tmp12.Contains(strEmissionsschluesselnr))
                        {
                            strFarbe = "Rot";
                        }
                        else if (tmp13.Contains(strEmissionsschluesselnr))
                        {
                            strFarbe = "Gelb";
                        }
                        else if (tmp14.Contains(strEmissionsschluesselnr))
                        {
                            strFarbe = "Gruen";
                        }
                        else
                        {
                            strFarbe = "N/A";
                        }
                        break;
                    case "M2, M3, N (PMS)":
                        ArrayList tmp15 = new ArrayList() { "40-42", "50-52" };
                        ArrayList tmp16 = new ArrayList() { "10-12", "30-32", "40-42", "50-52" };
                        ArrayList tmp17 = new ArrayList() { "43", "53" };
                        ArrayList tmp18 = new ArrayList() { "10-12", "20-22", "30-33", "40-43", "50-53", "60", "61" };
                        ArrayList tmp19 = new ArrayList() { "44", "54" };
                        ArrayList tmp20 = new ArrayList() { "10-12", "20-22", "30-34", "40-45", "50-55", "60", "61", "70", "71" };
                        ArrayList tmp21 = new ArrayList() { "33-35", "44", "45", "54", "55", "60", "61" };
                        if (strStufe == "PMK 01" && tmp15.Contains(strEmissionsschluesselnr) || strStufe == "PMK 00" && tmp16.Contains(strEmissionsschluesselnr))
                        {
                            strFarbe = "Rot";
                        }
                        else if (strStufe == "PMK 00" && tmp17.Contains(strEmissionsschluesselnr) || strStufe == "PMK 01" && tmp18.Contains(strEmissionsschluesselnr))
                        {
                            strFarbe = "Gelb";
                        }
                        else if (strStufe == "PMK 01" && tmp19.Contains(strEmissionsschluesselnr) || strStufe == "PMK 02" && tmp20.Contains(strEmissionsschluesselnr) || strStufe == "PMK 03" && tmp21.Contains(strEmissionsschluesselnr) || strStufe == "PMK 04" && tmp21.Contains(strEmissionsschluesselnr))
                        {
                            strFarbe = "Gruen";
                        }
                        else
                        {
                            strFarbe = "N/A";
                        }
                        break;
                    default:
                        strFarbe = "Fehler im Code";
                        break;
                }
            }
            //Plakettenfarbe wird festgelegt END------------------------------------------
            
            //Plakette wird angezeigt und das Form wird vergrößert------------------------
            this.ClientSize = new System.Drawing.Size(376, 489);
            this.imgPlakette.Visible = true;

            if (strFarbe == "Gruen")
            {
                this.imgPlakette.Visible = true;
                this.imgPlakette.Load(Environment.CurrentDirectory + @"\gruen.png");
            }
            else if (strFarbe == "Gelb")
            {
                this.imgPlakette.Visible = true;
                this.imgPlakette.Load(Environment.CurrentDirectory + @"\gelb.png");
                MessageBox.Show("Die Feinstaubplakettenfarbe ist Gelb, es wird keine Feinstaubplakette gedruckt.","Achtung", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else if (strFarbe == "Rot")
            {
                this.imgPlakette.Visible = true;
                this.imgPlakette.Load(Environment.CurrentDirectory + @"\rot.png");
                MessageBox.Show("Die Feinstaubplakettenfarbe ist Rot, es wird keine Feinstaubplakette gedruckt.", "Achtung", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else
            {
                this.label5.Text = "Es konnte keine passende Plakettenfarbe zugeordnet werden";
            }
            
            //Plakette wird angezeigt und das Form wird vergrößert END--------------------

            //Beim Klick auf Drucken werden die Daten in die DB geschrieben, egal ob das Kennzeichen bereits vorhanden ist---------------
            DatatableWriter(strKennzeichen, strFahrzeugart, strAntriebsart, strStufe, strEmissionsschluesselnr, strFarbe, strUsername, strDatum);
            
            if (strFarbe == "Gruen")
            {
                // Zweiter Satz auf der Plakette
                string additionalInfo = System.Configuration.ConfigurationManager.AppSettings["AdditionalText"];

                //default Abstand 
                double abstandKennz = 28.0;
                double abstandAdd = 28.0;
                //Etticket wirt gedruckt------------------------------------------------------

                //wird Abstand für Kennz. und Zusätz. berechnet um den zweiten Satz zentriert auszudrucken
                if (!String.IsNullOrEmpty(strKennzeichen))
                {
                    abstandKennz = 57 - strKennzeichen.Length * 3;
                    abstandKennz = abstandKennz / 2 + 15;

                    abstandAdd = strKennzeichen.Length * 3 - additionalInfo.Length;
                    abstandAdd = abstandAdd / 2 + abstandKennz + 1;
                }

                string printString = "m m\r\nJ\r\nH 50\r\nS e;0,0,101.0,101.0,103\r\nO T\r\nT " + Convert.ToInt32(abstandKennz) + ",49,0,5,pt23;" + strKennzeichen.ToUpper() + "\r\nT " + Convert.ToInt32(abstandAdd) + ",53,0,19;" + additionalInfo + "\r\nA 1\r\n";
                string cabName = System.Configuration.ConfigurationManager.AppSettings["cabName"];
                RawPrinterHelper.SendStringToPrinter(cabName, printString);
                //Etticket wird gedruckt END -------------------------------------------------
            }
            //        }
            //    }
            //    catch (System.Data.SqlClient.SqlException openException)
            //    {
            //        MessageBox.Show(openException.Message, "SQL Fehler", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //    }
            //}
            //catch (System.Data.SqlClient.SqlException openException)
            //{ 
            //    MessageBox.Show(openException.Message, "SQL Fehler", MessageBoxButtons.OK, MessageBoxIcon.Error);
            //}
            //conn.Close();
            //Beim Klick auf Drucken werden die Daten in die DB geschrieben, egal ob das Kennzeichen bereits vorhanden ist END-----------
        }
        //Drucken END-----------------------------------------------------------------
        //Datenbestand ---------------------------------------------------------------
        private void button2_Click(object sender, EventArgs e)
        {
            this.button1.Enabled = false;
            this.comboBox2.Items.Clear();
            this.comboBox3.Items.Clear();
            this.comboBox1.Text = string.Empty;
            this.comboBox2.Text = string.Empty;
            this.comboBox3.Text = string.Empty;
            this.comboBox2.Enabled = false;
            this.comboBox3.Enabled = false;
            this.textBox1.Text = string.Empty;
        }
        private void dateiToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Feinstaubplaketten_Datenbestand datenbestand = new Feinstaubplaketten_Datenbestand();
            datenbestand.Show();
        }
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Feinstaubplaketten_Programm_Info about = new Feinstaubplaketten_Programm_Info();
            about.Show();
        }
        //Datenbestand END------------------------------------------------------------
    }
    public class RawPrinterHelper
    {
        // Structure and API declarions:
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public class DOCINFOA
        {
            [MarshalAs(UnmanagedType.LPStr)]
            public string pDocName;
            [MarshalAs(UnmanagedType.LPStr)]
            public string pOutputFile;
            [MarshalAs(UnmanagedType.LPStr)]
            public string pDataType;
        }
        [DllImport("winspool.Drv", EntryPoint = "OpenPrinterA", SetLastError = true, CharSet = CharSet.Ansi, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        public static extern bool OpenPrinter([MarshalAs(UnmanagedType.LPStr)] string szPrinter, out IntPtr hPrinter, IntPtr pd);

        [DllImport("winspool.Drv", EntryPoint = "ClosePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        public static extern bool ClosePrinter(IntPtr hPrinter);

        [DllImport("winspool.Drv", EntryPoint = "StartDocPrinterA", SetLastError = true, CharSet = CharSet.Ansi, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        public static extern bool StartDocPrinter(IntPtr hPrinter, Int32 level, [In, MarshalAs(UnmanagedType.LPStruct)] DOCINFOA di);

        [DllImport("winspool.Drv", EntryPoint = "EndDocPrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        public static extern bool EndDocPrinter(IntPtr hPrinter);

        [DllImport("winspool.Drv", EntryPoint = "StartPagePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        public static extern bool StartPagePrinter(IntPtr hPrinter);

        [DllImport("winspool.Drv", EntryPoint = "EndPagePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        public static extern bool EndPagePrinter(IntPtr hPrinter);

        [DllImport("winspool.Drv", EntryPoint = "WritePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
        public static extern bool WritePrinter(IntPtr hPrinter, IntPtr pBytes, Int32 dwCount, out Int32 dwWritten);

        // SendBytesToPrinter()
        // When the function is given a printer name and an unmanaged array
        // of bytes, the function sends those bytes to the print queue.
        // Returns true on success, false on failure.
        public static bool SendBytesToPrinter(string szPrinterName, IntPtr pBytes, Int32 dwCount)
        {
            Int32 dwError = 0, dwWritten = 0;
            IntPtr hPrinter = new IntPtr(0);
            DOCINFOA di = new DOCINFOA();
            bool bSuccess = false; // Assume failure unless you specifically succeed.

            di.pDocName = "My C#.NET RAW Document";
            di.pDataType = "RAW";

            // Open the printer.
            if (OpenPrinter(szPrinterName.Normalize(), out hPrinter, IntPtr.Zero))
            {
                // Start a document.
                if (StartDocPrinter(hPrinter, 1, di))
                {
                    // Start a page.
                    if (StartPagePrinter(hPrinter))
                    {
                        // Write your bytes.
                        bSuccess = WritePrinter(hPrinter, pBytes, dwCount, out dwWritten);
                        EndPagePrinter(hPrinter);
                    }
                    EndDocPrinter(hPrinter);
                }
                ClosePrinter(hPrinter);
            }
            // If you did not succeed, GetLastError may give more information
            // about why not.
            if (bSuccess == false)
            {
                dwError = Marshal.GetLastWin32Error();
            }
            return bSuccess;
        }

        public static bool SendFileToPrinter(string szPrinterName, string szFileName)
        {
            // Open the file.
            FileStream fs = new FileStream(szFileName, FileMode.Open);
            // Create a BinaryReader on the file.
            BinaryReader br = new BinaryReader(fs);
            // Dim an array of bytes big enough to hold the file's contents.
            Byte[] bytes = new Byte[fs.Length];
            bool bSuccess = false;
            // Your unmanaged pointer.
            IntPtr pUnmanagedBytes = new IntPtr(0);
            int nLength;

            nLength = Convert.ToInt32(fs.Length);
            // Read the contents of the file into the array.
            bytes = br.ReadBytes(nLength);
            // Allocate some unmanaged memory for those bytes.
            pUnmanagedBytes = Marshal.AllocCoTaskMem(nLength);
            // Copy the managed byte array into the unmanaged array.
            Marshal.Copy(bytes, 0, pUnmanagedBytes, nLength);
            // Send the unmanaged bytes to the printer.
            bSuccess = SendBytesToPrinter(szPrinterName, pUnmanagedBytes, nLength);
            // Free the unmanaged memory that you allocated earlier.
            Marshal.FreeCoTaskMem(pUnmanagedBytes);
            return bSuccess;
        }
        public static bool SendStringToPrinter(string szPrinterName, string szString)
        {
            IntPtr pBytes;
            Int32 dwCount;
            // How many characters are in the string?
            dwCount = szString.Length;
            // Assume that the printer is expecting ANSI text, and then convert
            // the string to ANSI text.
            pBytes = Marshal.StringToCoTaskMemAnsi(szString);
            // Send the converted ANSI string to the printer.
            SendBytesToPrinter(szPrinterName, pBytes, dwCount);
            Marshal.FreeCoTaskMem(pBytes);
            return true;
        }
    }
}